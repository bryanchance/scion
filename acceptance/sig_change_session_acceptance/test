#!/bin/bash

# Test that the SIG switches to a new session when the session ID is changed

. acceptance/common.sh
. acceptance/sigutil/common.sh

PROGRAM=`basename "$0"`
COMMAND="$1"
TEST_NAME="sig_change_session"

SRC_IA=1-ff00:0:113
SRC_IA_FILE="$(ia_file $SRC_IA)"
SRC_AS_FILE="$(as_file $SRC_IA)"
DST_IA=1-ff00:0:110
SIG_JSON="gen/ISD1/AS$SRC_AS_FILE/sig$SRC_IA_FILE/cfg.json"

TEST_TOPOLOGY="acceptance/sigutil/SIG.topo"

test_run() {
    set -e
    # Insert path policies
    local act1='"through-111": {"Sequence": "0 1-ff00:0:111 0"}'
    local act2='"through-112": {"Sequence": "0 1-ff00:0:112 0"}'
    jq ".PathPolicies = {$act1, $act2}" $SIG_JSON | sponge $SIG_JSON
    # Insert PktPolicies and Session
    jq ".ASes.\"$DST_IA\".PktPolicies = [{\"ClassName\": \"default\", \"SessIds\": [1]}]" $SIG_JSON | sponge $SIG_JSON
    jq ".ASes.\"$DST_IA\".Sessions = {\"1\": \"through-111\", \"2\": \"through-112\"}" $SIG_JSON | sponge $SIG_JSON

    # Run ping on session 1
    reload_sig "$SRC_IA_FILE"
    ./bin/sig_ping_acceptance -d -log.console info -src $SRC_IA -dst $DST_IA
    sleep 1
    grep -q "PktPolicies: New policy ia=1-ff00:0:110 class=default sessIds=\[0x01\]" "logs/sig$SRC_IA_FILE.log" || \
        fail "Could not find PktClass with session 1!"
    grep -q ".*sessMonitor: updating remote Info.*Hops: \[1-ff00:0:113 1>2 1-ff00:0:111 1>1 1-ff00:0:110\].*" "logs/sig$SRC_IA_FILE.log" || \
        fail "Could not find remote with path through 1-ff00:0:111!"

    # Change to session 2
    jq ".ASes.\"$DST_IA\".PktPolicies = [{\"ClassName\": \"default\", \"SessIds\": [2]}]" $SIG_JSON | sponge $SIG_JSON
    reload_sig "$SRC_IA_FILE"
    ./bin/sig_ping_acceptance -d -log.console info -src $SRC_IA -dst $DST_IA
    sleep 1
    grep -q "PktPolicies: New policy ia=1-ff00:0:110 class=default sessIds=\[0x02\]" "logs/sig$SRC_IA_FILE.log" || \
        fail "Could not find PktClass with session 2!"
    grep -q ".*sessMonitor: New remote.*Hops: \[1-ff00:0:113 2>2 1-ff00:0:112 1>2 1-ff00:0:110\].*" "logs/sig$SRC_IA_FILE.log" || \
        fail "Could not find remote with path through 1-ff00:0:112!"
}

reload_sig() {
    id="$(./tools/dc scion exec -T scion_sig_$1 pgrep -x sig)"
    ./tools/dc scion exec -T scion_sig_"$1" kill -SIGHUP "$id"
}

shift
do_command $PROGRAM $COMMAND $TEST_NAME "$@"
