#!/bin/bash

# The discovery service serves the static and dynamic topology file.
# The reduced topology is served to anyone, the full topology is only
# served to hosts allowed by the ACL.

. acceptance/dsutil/common.sh

TEST_NAME="ds_serves_correct_topo"
TEST_TOPOLOGY="./acceptance/ds_serves_correct_topo_acceptance/Test.topo"

MULTI_SVC_AS_DIR="gen/ISD1/ASff00_0_111"


test_setup() {
    set -e
    # Add regular and privileged interface.
    base_add_addrs

    ./scion.sh topology -c $TEST_TOPOLOGY -ds -d
    for ds in gen/ISD1/*/ds*; do
        # Add privileged to the ACL.
        printf "\n$PRIVILEGED/32" >> $ds/acl
    done

    # Run scion topology.
    base_scion_run
}

test_run() {
    set -e
    check_static
    check_dynamic
    log "All tests passed"
}

check_static() {
    log "[static] Starting test"
    check_all_disc $STATIC "check_static"
    log "[static] All tests passed"
}

# Check that the discovery service removes unavailable instances from
# the dynamic topology.
check_dynamic() {
    log "[dynamic] Starting tests"
    # Check that TTL is set.
    check_all_ttl
    # Check dynamic is initially same as on disk.
    check_all_disc $DYNAMIC "check_dynamic start"
    # Get address of discovery service in AS with multiple service instances.
    addr="$( get_laddr $MULTI_SVC_AS_DIR/ds1-ff00_0_111-1 )"
    # Kill services instances and check that the dynamic is updated.
    # FIXME(roosd): Beacon service does not implement health checks yet.
    # log "[dynamic] Killing beacon service"
    # kill_and_check "bs1-ff00_0_111-2" $addr 1 2 2
    log "[dynamic] Killing certificate service"
    kill_and_check "cs1-ff00_0_111-2" $addr 2 1 2 2
    log "[dynamic] Killing discovery service"
    kill_and_check "ds1-ff00_0_111-2" $addr 2 1 1 2
    log "[dynamic] Killing path service"
    kill_and_check "ps1-ff00_0_111-2" $addr 2 1 1 1
    # Restart instances
    log "[dynamic] Restarting killed services"
    ./scion.sh run nobuild
    # Make sure that the instances have registered with service discovery.
    sleep 10
    # Check dynamic is served with all instances.
    check_all_disc $DYNAMIC "check_dynamic end"
    log "[dynamic] All tests passed"
}

# Check that all discovery services serve dynamic topology with TTL set to default.
check_all_ttl() {
    for ds in gen/ISD1/*/ds*; do
        addr=$( get_laddr $ds )
        query_topo $REGULAR $addr $DYNAMIC $REDUCED | jq '.TTL == 60' -e || fail "TTL invalid for reduced topo"
        query_topo $PRIVILEGED $addr $DYNAMIC $FULL | jq '.TTL == 60' -e || fail "TTL invalid for full topo"
    done
}

# Check that all discovery services serve same topology as on the disk.
#
# Arguments:
#   Static or dynamic
check_all_disc() {
    for ds in gen/ISD1/*/ds*; do
        addr=$( get_laddr $ds )
        # Check reduced topo
        compare_topo_reduced $ds "$( query_topo $PRIVILEGED $addr $1 $REDUCED )" "$2: privileged"
        compare_topo_reduced $ds "$( query_topo $REGULAR $addr $1 $REDUCED )" "$2: regular"
        # Check full topo
        topo=$( query_topo $PRIVILEGED $addr $1 $FULL )
        local d=$( diff <(jq 'del(.Timestamp, .TimestampHuman, .TTL)' -S <(echo "$topo")) <(jq '.' -S <(cat "$ds/topology.json")) ) || \
            { echo "$d"; fail "Full topology differs from disk. ds=$ds stage=$2"; }
        sc="$( query_status_code $REGULAR $addr $1 $FULL )"
        [ "$sc" == "403" ] || fail "Error: full=$FULL mode=$1 host=$REGULAR err=Unexpected status code: $sc"
    done
}

# Get the host info of the discovery service.
#
# Arguments:
#   Discovery service config dir
get_laddr() {
    # Get the discovery service name.
    local ds="${1##*/}"
    jq -r ".DiscoveryService.\"$ds\".Addrs[].Public | \"\(.Addr):\(.L4Port)\"" $1/topology.json
}

# Compare topology with version on disk.
#
# Arguments:
#   Discovery service config dir
#   Raw topology recieved from discovery service
compare_topo_reduced() {
    filter="del(.ZookeeperService, .BeaconService) | del( .BorderRouters[].Interfaces[] | (.Overlay, .BindOverlay, .PublicOverlay, .RemoteOverlay))"
    local d=$( diff <(jq 'del(.Timestamp, .TimestampHuman, .TTL)' -S <(echo $2)) <(jq "$filter" -S <(cat "$1/topology.json")) ) || \
            { echo "$d"; fail "Reduced topology differs from disk. ds=$ds stage=$3"; }
}

# Kill the service instance and check the number of service instances in
# the topolgy file.
#
# Arguments:
#   Server string to kill
#   Host info of discovery service
#   Expected beacon server count
#   Expected certificate server count
#   Expected path server count
kill_and_check() {
    ./tools/dc scion kill "scion_$1"
    sleep 10
    topo=$( query_topo $PRIVILEGED $2 $DYNAMIC $FULL )
    jq "[(.BeaconService | length == $3),(.CertificateService | length == $4),(.DiscoveryService | length == $5),(.PathService | length == $6)] | all" -e <(echo $topo) > /dev/null
    # BS is not exposed to regular hosts
    topo=$( query_topo $REGULAR $2 $DYNAMIC $REDUCED )
    jq "[(.BeaconService | length == 0),(.CertificateService | length == $4),(.DiscoveryService | length == $5),(.PathService | length == $6)] | all" -e <(echo $topo) > /dev/null
}

shift
do_command $PROGRAM $COMMAND $TEST_NAME "$@"
